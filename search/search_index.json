{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Hello and welcome to i think therefore i communicate, a personal site currently under construction.</p>"},{"location":"#welcome","title":"Welcome","text":""},{"location":"percolations/","title":"Index","text":""},{"location":"percolations/cant-separate-ideation-from-execution/","title":"In pursuit of creativity, you can't separate ideation from execution","text":""},{"location":"percolations/cant-separate-ideation-from-execution/#draw-paint-or-assemble-studies-by-handartists-must-experimentdont-give-in-to-slop","title":"Draw, paint, or assemble studies by hand\u2014Artists must experiment\u2014Don't give in to slop","text":"<p>Generative AI (Gen AI) has been around for a while, but in recent years it has become more accessible and harder to distinguish from human-drawn art. Creatives and non-creatives alike are integrating this technology into their processes at work.</p> <p>This post explores the value of draftsmanship, assemblage, and painting as necessary skills with which to wield Gen AI:</p> <ul> <li>Recognizing that these skills are a crucial means to develop creativity in any person that has to be practiced and maintained, even though it takes time on the job.</li> <li>Trusting creatives to decide when they need to do something manually\u2014slowly, even, and trusting them to know when to automate parts of their job with Gen AI.</li> </ul> <p>For example, manually editing or making a graphic by hand can take hours. Once the concept has been determined, the next step is to execute. Where once you would have to spend a certain amount of time to execute something, now you can use a prompt and, if you're a creative, clean up the rough edges (say, illegible text or awkward perspective).</p> <p>It could also be argued that if your work as a graphic designer includes rote graphic manipulation, say, improving the image of a product then cropping it for ten different image specs for different online shopping sites, Gen AI can take away the tedious repetition of resizing and editing the work.</p> <p>That being said, drawing something by hand contributes to two skills necessary to make use of Gen AI:</p> <ul> <li>Conceptualization. Before you execute, you need a concept. Drawing by hand improves this.</li> <li>Vocabulary building and reasoning. The person making the prompt has to have a good vocabulary (perspective, palette, typography) to set up the Gen AI for success.</li> </ul> <p>If you ask any digital artist or graphic designer what their most used shortcut is, there's a good chance they'll say Ctrl+Z. The undo button. They draw something, then they erase and redraw it. They nudge something, then they go back to a previous position.</p> <p>They're constantly iterating. They're asking themselves: Does this look good? Why does it look bad? What if I tried this in another perspective? What if I emphasized this bit?</p> <p>The generative AI makes these decisions for the prompter, hiding these variables. Artists, especially new ones, risk losing awareness of these factors. The possibility space shrinks because of a lack of visibility. They don't get to practice the muscle of stretching that space till it bursts.</p> <p>With every conscious choice, a concept becomes clearer. If you're conveying apprehension on a human face, what pose do they strike? Are they pulling their hair? Are they biting their nails? Are they grimacing? That's why artists draw studies before they commit to the next step. When making a comic book, you start with pencils before committing to ink.</p> <p>Can Gen AI be used in this step? Of course it can, not necessarily as the finished product itself. Instead, AI is used to help generate ideas, references, or elements that are manipulated by the artist.</p>"},{"location":"percolations/cant-separate-ideation-from-execution/#conceptualization-when-you-look-at-art-you-are-looking-at-a-thousand-choices","title":"Conceptualization: when you look at art you are looking at a thousand choices","text":""},{"location":"percolations/cant-separate-ideation-from-execution/#vocabulary-matters","title":"Vocabulary matters","text":"<p>What is a dead-on perspective? What is damashi itten? What about the Kubrick stare, or the pieta? Would a fisheye view work well with our apprehensive human face? What about a bird's-eye view?</p> <p>Art has a vast vocabulary; how do artists learn these things? They learn by drawing these techniques to see for themselves their effect. An artist's recall of a particular compositional technique or color palette depends on how familiar they are with it, how much time and experience they've spent with it.</p> <p>Without this language, there is a limit to the variety that can be achieved with the prompt. A prompt needs this language; lacking it, your prompted output looks no different from a hundred others.</p>"},{"location":"percolations/cant-separate-ideation-from-execution/#letting-artists-designers-creatives-draw","title":"\"Letting\" artists, designers, creatives draw","text":"<p>Now that we've established why manual art skills matter, we can tackle the elephant in the room: speed. The implication of GenAI's near-instant output is that artists should work faster, or that one artist can do the work of three at the same amount of time. While Gen AI can be used to automate a lot of repetitive work (like cropping something for ten different image specifications) its utility in other phases of creative work is limited.</p> <p>How limited? That depends on your artist and the type of work they're doing. This is the hard part: the part where creatives need to be listened to with regards to the limitations of Gen AI. It is not a magic asset-making thing. Sometimes having to correct the assets it makes takes more time than drawing the asset from scratch itself. The only way to know is by talking to your artists.</p>"},{"location":"percolations/cant-separate-ideation-from-execution/#closing-thoughts","title":"Closing thoughts","text":"<p>Not everything needs to be hand drawn, but neither should our use of technology contribute to the devaluation of manual art skills.</p>"},{"location":"percolations/foundations-vs-trivia/","title":"Protecting ourselves against trivial knowledge","text":""},{"location":"percolations/foundations-vs-trivia/#foundational-versus-trivial-knowledge","title":"Foundational versus trivial knowledge","text":"<p>Every developer has some bits of trivia about a framework or tool if they've worked on it long enough. \"Did you know,\" they'll start, \"that from <code>version X</code> to <code>version Y</code>, our frontend framework had this bug that we had to work around? But it wasn't there from version <code>X - n</code> to <code>X - 1</code>.\"</p> <p>That sort of knowledge is trivia. We spend time learning about the rough edges of a tool, then these rough edges are sanded away (hopefully, eventually). The time and energy learning that specific quirk, then working around that specific quirk, has been spent. We wouldn't have had to learn this if the tool did not have this one weird trick.</p> <p>Framework-specific knowledge can sometimes also qualify as trivia. By what metric does framework-specific knowledge pass through the crucible of user adoption to enter the hallowed halls of general programming know-how? Is knowing React, the dominant frontend framework of Big Tech, less trivial than knowing Angular 1?</p> <p>We are naturally at the mercy of whoever is writing these tools, who are at the mercy of some perceived deadline or race to production. The people who set the deadline are setting it based on their perception of the market. User adoption made React what it is today. So it goes.</p> <p>The way tools are made incentivizes speed above reliability. One of the ways we are able to keep up with these issues is by making our tools open source. There are more eyeballs on the tool, faster reporting, faster adoption. The cognitive load of finding bugs and workarounds is spread out. A common argument which is difficult to quantify is that older proprietary tools were just as busted, we just didn't know. (Does this mean that paid dev tools are worse off than open source tools, because they don't have the additional free QA and stress testing from their users? Again, that's a case-to-case basis; there are no easy answers.)</p> <p>Either way, the issue is moot: at work, you're going to be using whatever the company uses. There's a build or buy matrix, opinions are given, decisions are made. Every team has its own appetite for building versus buying or adopting free open source software. Every team has to set its threshold for reliability and speed. After all, some frameworks and programming languages have a better batting average than others for both traits.</p> <p>That being said, the time spent learning and working around trivia, whether these are regression bugs, integration quirks, missing features, and so on, is time that we can't get back. This puts me, personally, squarely in the camp that heavily skews towards reliable, stable tools. Tools that don't make me learn incantations I'll have to discard later on. I don't want something I'm building to be made on top of quicksand. A tool's development speed, the speed at which it delivers features, is secondary to its ability to keep working after the update.</p> <p>In a world where we don't have the infinite time to build everything from scratch, how do we choose a programming tool with this in mind? How do we quantify tool adoption based on protecting ourselves from trivia?</p>"},{"location":"percolations/foundations-vs-trivia/#using-reliability-as-a-metric","title":"Using reliability as a metric","text":"<p>Is it safe to say that tool reliability captures the idea of protecting yourself against trivial knowledge? What about the amount of magic a framework uses to hide abstractions - wouldn't that put us at the mercy of framework-specific knowledge? Isn't that also trivia by another name? At this point, why not return to standard libraries that ship with each major programming language's update?</p>"},{"location":"percolations/there-and-back-again/","title":"There and back again","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed consequat luctus nibh, eget sollicitudin magna rhoncus a. Ut ut justo ut ligula lobortis posuere. Morbi consectetur massa ipsum, et tincidunt neque blandit in. Aliquam in iaculis ligula, non suscipit magna. Etiam suscipit, sem et mollis efficitur, dui lorem ultrices metus, a volutpat felis ipsum ut quam. Sed porttitor leo ut lacinia ultrices. Nullam ullamcorper augue ullamcorper nunc consequat rhoncus. Sed non dictum nunc. Aenean faucibus sollicitudin massa ac cursus. Mauris ultrices nisl non turpis viverra lacinia. Aliquam erat volutpat. Curabitur finibus semper dapibus. In vestibulum sapien in diam cursus lobortis.</p> <p>Sed sagittis lacus sit amet ullamcorper efficitur. Pellentesque facilisis nisi a ante pellentesque blandit. Sed semper a arcu vitae tincidunt. Curabitur efficitur posuere urna, nec fringilla felis pellentesque vel. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Morbi at massa mauris. Nullam porta, nisl quis eleifend condimentum, turpis lectus commodo justo, ac dignissim nibh odio ut lorem. Donec rutrum sem id mattis venenatis. Praesent posuere molestie quam, non finibus lacus sagittis sit amet.</p> <p>Nam nisl ligula, vehicula in lectus non, porttitor luctus risus. Aliquam vehicula sapien vel hendrerit suscipit. Aenean nec turpis est. Etiam lacinia non justo porttitor semper. Duis bibendum lectus in aliquet porta. Sed ut tincidunt arcu. Sed tempus magna ex, ac mattis orci ornare in. Nullam viverra tempor lorem, in pulvinar arcu iaculis eget. Sed scelerisque sollicitudin ex, sit amet rutrum libero. Donec suscipit, massa non porta scelerisque, nibh lorem accumsan quam, posuere congue purus nibh sed tellus.</p> <p>Ut vestibulum eros eu justo pulvinar, at dictum sapien porta. Proin convallis porttitor tincidunt. Vivamus ac ante quis risus pretium pretium ut faucibus est. Etiam efficitur ex in felis feugiat, ac dignissim ex efficitur. Aliquam condimentum lacinia purus, id tempor metus commodo at. Donec mattis ex ac porta auctor. Aliquam convallis turpis ac pharetra commodo. Nullam finibus felis vel feugiat rutrum. Aliquam condimentum nibh sit amet leo finibus, interdum ultrices libero facilisis. Nulla suscipit, dui vel varius gravida, elit velit bibendum eros, sit amet mattis odio sapien in nisl.</p> <p>Suspendisse at lectus gravida, sodales purus ac, cursus quam. Morbi turpis risus, hendrerit vitae nulla eget, vestibulum auctor neque. Aenean ullamcorper nec nunc nec sollicitudin. Integer fringilla lacus eget ligula volutpat vulputate. Fusce sed fermentum orci, et tempus ex. Donec pharetra turpis dolor. Nulla et placerat nisi, non venenatis tellus. Sed lobortis eros a suscipit convallis. Sed aliquam neque vel ultricies pharetra. Vivamus euismod interdum porta. Mauris vel ultricies ex. </p>"},{"location":"percolations/there-and-back-again/#myhome-geocities-and-angelfire","title":"MyHome, Geocities, and AngelFire","text":""},{"location":"percolations/there-and-back-again/#tabulas-and-blogspot","title":"Tabulas and Blogspot","text":""},{"location":"percolations/there-and-back-again/#livejournal-and-tumblr","title":"LiveJournal and Tumblr","text":""},{"location":"percolations/there-and-back-again/#wordpress-the-modern-web-and-evolving-cms","title":"Wordpress: the modern web and evolving CMS","text":""},{"location":"percolations/there-and-back-again/#jekyll-headless-cms-markdown","title":"Jekyll, headless CMS, Markdown","text":""},{"location":"percolations/there-and-back-again/#docusaurus-and-mkdocs","title":"Docusaurus and MkDocs","text":""},{"location":"workflows/ticket-deflection/","title":"Ticket deflection","text":"<p>Ticket deflection is an automated workflow wherein support tickets are deflected by first serving documentation. A ticket is deflected when a user is able to solve their problems independently, without a support engineer.</p> <p>Ticket deflection enables support teams to allocate resources to more complex issues. It is also used to measure the impact of documentation and identify gaps.</p>"},{"location":"workflows/ticket-deflection/#ticket-deflection","title":"Ticket deflection","text":""}]}